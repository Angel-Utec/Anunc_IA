from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from openai import OpenAI
import os
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Inicializar el cliente de OpenAI
api_key = os.getenv('OPENAI_API_KEY')
if not api_key:
    raise Exception("Por favor, proporciona tu clave de API de OpenAI en el archivo .env")
client = OpenAI(api_key=api_key)

app = FastAPI()
a
# Modelos Pydantic

class Descripcion(BaseModel):
    usuarioId: int
    nombreProducto: str
    descripcionProducto: str

class DescripcionMejorada(BaseModel):
    descripcionId: int
    nombreProducto: str

class Titular(BaseModel):
    nombreProducto: str
    descripcionProducto: str

class TextoAnuncio(BaseModel):
    nombreProducto: str
    titular: str
    descripcionProducto: str

class Audiencia(BaseModel):
    nombreProducto: str
    textoAnuncio: str

class AudienciaAjuste(BaseModel):
    audienciaId: int
    nuevoTexto: str

class Presupuesto(BaseModel):
    entradaUsuario: str

class PresupuestoAjuste(BaseModel):
    presupuestoId: int
    nuevoPresupuesto: str

class Colocacion(BaseModel):
    nombreProducto: str
    datosAnuncio: str

class PromptImagen(BaseModel):
    nombreProducto: str
    colocacion: str

class PromptImagenAjuste(BaseModel):
    promptId: int
    nuevoPrompt: str

class AnuncioCompleto(BaseModel):
    elementos: dict

class Producto(BaseModel):
    nombreProducto: str
    descripcionProducto: str
    publicoObjetivo: str = None  # Opcional

class CopiaPublicitaria(BaseModel):
    producto: Producto

# Endpoints

# 1. Descripción del Producto
# POST /descripciones
@app.post("/descripciones")
async def crear_descripcion(descripcion: Descripcion):
    # Aquí almacenarías la descripción en la base de datos (simulado)
    return {"mensaje": "Descripción creada", "descripcion": descripcion}

# GET /descripciones/{usuarioId}
@app.get("/descripciones/{usuarioId}")
async def obtener_descripciones(usuarioId: int):
    # Aquí recuperarías las descripciones del usuario (simulado)
    return {
        "usuarioId": usuarioId,
        "descripciones": [
            {
                "descripcionId": 1,
                "nombreProducto": "Producto A",
                "descripcionProducto": "Descripción del producto A"
            },
            {
                "descripcionId": 2,
                "nombreProducto": "Producto B",
                "descripcionProducto": "Descripción del producto B"
            }
        ]
    }

# 2. Generar Descripción Mejorada
# POST /descripciones/mejorar
@app.post("/descripciones/mejorar")
async def mejorar_descripcion(descripcion: DescripcionMejorada):
    # Simulamos obtener la descripción previa (en un caso real, la obtendrías de la base de datos)
    descripcion_previa = "Descripción previa del producto"

    prompt = f"Mejora la siguiente descripción del producto '{descripcion.nombreProducto}':\n\n{descripcion_previa}"

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=150,
        temperature=0.7,
    )

    descripcion_mejorada = response.choices[0].message.content.strip()
    return {
        "nombreProducto": descripcion.nombreProducto,
        "descripcionMejorada": descripcion_mejorada
    }

# 3. Generar Titular
# POST /titulares
@app.post("/titulares")
async def generar_titular(titular: Titular):
    prompt = f"Crea un titular promocional para el producto '{titular.nombreProducto}':\n\n{titular.descripcionProducto}"

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=25,
        temperature=0.7,
    )

    titular_generado = response.choices[0].message.content.strip()
    return {
        "nombreProducto": titular.nombreProducto,
        "titular": titular_generado
    }

# 4. Generar Texto del Anuncio
# POST /textos-anuncio
@app.post("/textos-anuncio")
async def generar_texto_anuncio(texto_anuncio: TextoAnuncio):
    prompt = f"Basado en el siguiente titular y descripción, genera un texto de anuncio de hasta 125 caracteres con una llamada a la acción:\n\nTitular: {texto_anuncio.titular}\nDescripción: {texto_anuncio.descripcionProducto}"

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=125,
        temperature=0.7,
    )

    texto_generado = response.choices[0].message.content.strip()
    return {
        "nombreProducto": texto_anuncio.nombreProducto,
        "textoAnuncio": texto_generado
    }

# 5. Generar Audiencia
# POST /audiencias
@app.post("/audiencias")
async def generar_audiencia(audiencia: Audiencia):
    prompt = f"Basado en el siguiente texto de anuncio para el producto '{audiencia.nombreProducto}', identifica la audiencia ideal (ubicación, edad, género, intereses, comportamientos):\n\n{audiencia.textoAnuncio}"

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=200,
        temperature=0.7,
    )

    audiencia_generada = response.choices[0].message.content.strip()
    return {
        "nombreProducto": audiencia.nombreProducto,
        "audiencia": audiencia_generada
    }

# PUT /audiencias/{audienciaId}
@app.put("/audiencias/{audienciaId}")
async def ajustar_audiencia(audienciaId: int, ajuste: AudienciaAjuste):
    # Aquí actualizarías la audiencia en la base de datos (simulado)
    return {"mensaje": "Audiencia ajustada", "audienciaId": audienciaId, "nuevoTexto": ajuste.nuevoTexto}

# 6. Generar Presupuesto
# POST /presupuestos
@app.post("/presupuestos")
async def generar_presupuesto(presupuesto: Presupuesto):
    prompt = f"Sugiere un presupuesto para la siguiente entrada:\n\n{presupuesto.entradaUsuario}"

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=50,
        temperature=0.7,
    )

    presupuesto_sugerido = response.choices[0].message.content.strip()
    return {"presupuesto": presupuesto_sugerido}

# PUT /presupuestos/{presupuestoId}
@app.put("/presupuestos/{presupuestoId}")
async def ajustar_presupuesto(presupuestoId: int, ajuste: PresupuestoAjuste):
    # Aquí actualizarías el presupuesto en la base de datos (simulado)
    return {"mensaje": "Presupuesto ajustado", "presupuestoId": presupuestoId, "nuevoPresupuesto": ajuste.nuevoPresupuesto}

# 7. Generar Colocaciones
# POST /colocaciones
@app.post("/colocaciones")
async def generar_colocaciones(colocacion: Colocacion):
    prompt = f"Recomienda las mejores colocaciones para el siguiente anuncio del producto '{colocacion.nombreProducto}':\n\n{colocacion.datosAnuncio}"

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=50,
        temperature=0.7,
    )

    colocaciones_recomendadas = response.choices[0].message.content.strip()
    return {
        "nombreProducto": colocacion.nombreProducto,
        "colocaciones": colocaciones_recomendadas
    }

# 8. Generar Prompt para Imagen
# POST /prompts-imagen
@app.post("/prompts-imagen")
async def generar_prompt_imagen(prompt_imagen: PromptImagen):
    prompt = f"Genera un prompt detallado para una imagen publicitaria del producto '{prompt_imagen.nombreProducto}' basada en la siguiente colocación:\n\n{prompt_imagen.colocacion}"

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=150,
        temperature=0.7,
    )

    prompt_generado = response.choices[0].message.content.strip()
    return {
        "nombreProducto": prompt_imagen.nombreProducto,
        "promptImagen": prompt_generado
    }

# PUT /prompts-imagen/{promptId}
@app.put("/prompts-imagen/{promptId}")
async def ajustar_prompt_imagen(promptId: int, ajuste: PromptImagenAjuste):
    # Aquí actualizarías el prompt de la imagen en la base de datos (simulado)
    return {"mensaje": "Prompt de imagen ajustado", "promptId": promptId, "nuevoPrompt": ajuste.nuevoPrompt}

# 9. Generar Anuncio Completo
# POST /anuncios
@app.post("/anuncios")
async def generar_anuncio_completo(anuncio: AnuncioCompleto):
    prompt = f"Crea un anuncio completo combinando los siguientes elementos:\n{anuncio.elementos}"

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "Eres un experto en marketing digital."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=500,
        temperature=0.7,
    )

    anuncio_generado = response.choices[0].message.content.strip()
    return {"anuncioCompleto": anuncio_generado}

# GET /anuncios/{usuarioId}
@app.get("/anuncios/{usuarioId}")
async def obtener_anuncios(usuarioId: int):
    # Aquí recuperarías los anuncios del usuario (simulado)
    return {"usuarioId": usuarioId, "anuncios": ["Anuncio 1", "Anuncio 2"]}

# Nuevo Endpoint: Generar Copias Publicitarias (Autotarget)
# POST /generar_copias_publicitarias/
@app.post("/generar_copias_publicitarias/")
async def generar_copias_publicitarias(copia: CopiaPublicitaria):
    producto = copia.producto

    prompt = f"""
Eres Autotarget, un modelo de lenguaje especializado en generar copias publicitarias persuasivas y creativas. Te enfocarás en capturar los puntos de venta únicos del producto, involucrar emocionalmente al público objetivo y motivarlos a tomar acción (por ejemplo, comprar, registrarse o solicitar más información). Tus respuestas deben ser claras, concisas y persuasivas, utilizando titulares llamativos y textos optimizados para varias plataformas publicitarias como redes sociales, email y páginas de destino.

Directrices:
1. Conciencia de la Audiencia: Adapta el tono y estilo según el público objetivo, que puede variar desde casual y moderno para audiencias jóvenes hasta profesional y autoritario para contextos de negocios.

2. Técnicas Persuasivas:
- Usa apelaciones emocionales (felicidad, emoción, urgencia, etc.).
- Destaca beneficios sobre características, enfatizando el problema que el producto resuelve.
- Incluye llamadas a la acción que inspiren urgencia o curiosidad (por ejemplo, "¡Obtén el tuyo ahora!", "¡Descubre el futuro hoy!").

3. Creatividad: Infunde creatividad en la redacción, especialmente para productos innovadores o disruptivos. Utiliza metáforas, eslóganes o frases pegajosas para hacer que el producto sea memorable.

4. Tono y Estilo: Adapta el tono para que coincida con el tipo de producto y la voz de la marca. Ejemplos incluyen:
- Juguetón y optimista para marcas de estilo de vida.
- Confiable e informativo para servicios financieros.
- Elegante y enfocado en tecnología para productos tecnológicos.

5. Optimización:
- Mantén la copia corta e impactante (especialmente para plataformas con límites de caracteres).
- Hazla visualmente adaptable (por ejemplo, divide en secciones como encabezados, texto principal y eslóganes).

Instrucciones:
- Basado en la descripción del producto proporcionada, genera 2-3 variaciones de copias publicitarias. Cada versión debe variar en tono (por ejemplo, una lúdica, una profesional y una altamente persuasiva). Incluye un titular llamativo, cuerpo del texto y una llamada a la acción fuerte.

Descripción del Producto:
Nombre: {producto.nombreProducto}
Descripción: {producto.descripcionProducto}
"""

    if producto.publicoObjetivo:
        prompt += f"Público Objetivo: {producto.publicoObjetivo}\n"

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "user", "content": prompt}
        ],
        max_tokens=1000,
        temperature=0.7,
    )

    copias_generadas = response.choices[0].message.content.strip()
    return {"copiasPublicitarias": copias_generadas}
