name: Deploy AnuncIA to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$PYTHONPATH:$(pwd):$(pwd)/backend" >> $GITHUB_ENV

    # Configura variables de entorno usando los secretos de GitHub
    - name: Set environment variables
      run: |
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV

    # Instalar dependencias globalmente para ejecutar Alembic
    - name: Install dependencies globally
      working-directory: ./backend
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt

    # Instalar dependencias en el directorio de empaquetado para Lambda
    - name: Install dependencies for Lambda package
      working-directory: ./backend
      run: |
        mkdir -p package  # Crear el directorio 'package' si no existe
        pip install --upgrade pip
        pip install -r requirements.txt -t ./package  # Instalar todas las dependencias en 'package'

    # Aplica las migraciones usando Alembic
    - name: Apply Alembic migrations
      working-directory: ./backend
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        python -m alembic upgrade head

    - name: Run tests with coverage
      env:
        REDIS_URL: redis://localhost:6379
        DATABASE_URL: "sqlite:///:memory:"
      working-directory: ./backend
      run: |
        coverage run --rcfile=.coveragerc -m pytest tests
        coverage report
        coverage xml -o coverage.xml
      continue-on-error: true

    - name: Prepare Lambda package
      working-directory: ./backend
      run: |
        cd package
        zip -r ../../backend.zip .  # Crear el ZIP con todas las dependencias
        cd ..
        zip -g backend.zip main.py  # AÃ±adir 'main.py' al ZIP

    - name: List ZIP contents (Debugging Step)
      run: unzip -l backend.zip

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Deploy to AWS Lambda
      run: |
        aws lambda update-function-code \
          --function-name anunc-ia-backend \
          --zip-file fileb://backend.zip

  deploy_frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install

    # Skip deployment en modo desarrollo
    - name: Skip deployment in development mode
      if: ${{ github.event_name == 'push' }}
      run: echo "Development build, skipping deployment."

    - name: Build frontend (only for production)
      if: ${{ github.event_name != 'push' }}
      run: |
        cd frontend
        npm run build

    - name: Deploy to S3 (only if build exists)
      if: ${{ github.event_name != 'push' }}
      run: |
        if [ -d "frontend/build" ]; then
          aws s3 sync frontend/build/ s3://anunc-ia-frontend --delete
        else
          echo "Build folder not found, skipping S3 sync"
        fi
