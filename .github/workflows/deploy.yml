name: Deploy AnuncIA to AWS

on:
  push:
    branches:
      - main

jobs:
  build_layer_main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install main dependencies for Layer1
        run: |
          mkdir -p python_main
          pip install --no-cache-dir -r backend/requirements_main.txt -t python_main/
          # Eliminar archivos innecesarios
          find python_main/ -name "*.pyc" -delete
          find python_main/ -type d -name "__pycache__" -exec rm -r {} +
          find python_main/ -type d -name "tests" -exec rm -r {} +
          find python_main/ -type d -name "test" -exec rm -r {} +

      - name: Package Layer1
        run: zip -r dependencies_layer_main.zip python_main/

      - name: Publish Layer1
        run: |
          aws lambda publish-layer-version \
            --layer-name anunc-ia-dependencies-main \
            --zip-file fileb://dependencies_layer_main.zip \
            --compatible-runtimes python3.10
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

  build_layer_secondary:
    runs-on: ubuntu-latest
    needs: build_layer_main
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install secondary dependencies for Layer2
        run: |
          mkdir -p python_secondary
          pip install --no-cache-dir -r backend/requirements_secondary.txt -t python_secondary/
          # Eliminar archivos innecesarios
          find python_secondary/ -name "*.pyc" -delete
          find python_secondary/ -type d -name "__pycache__" -exec rm -r {} +
          find python_secondary/ -type d -name "tests" -exec rm -r {} +
          find python_secondary/ -type d -name "test" -exec rm -r {} +

      - name: Package Layer2
        run: zip -r dependencies_layer_secondary.zip python_secondary/

      - name: Publish Layer2
        run: |
          aws lambda publish-layer-version \
            --layer-name anunc-ia-dependencies-secondary \
            --zip-file fileb://dependencies_layer_secondary.zip \
            --compatible-runtimes python3.10
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

  deploy_backend:
    runs-on: ubuntu-latest
    needs: [build_layer_main, build_layer_secondary]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Install application dependencies
        run: |
          mkdir -p build
          pip install --no-cache-dir -r backend/requirements_app.txt -t build/
          # Desinstalar dependencias que ya están en capas
          pip uninstall -y -r backend/requirements_main.txt || true
          pip uninstall -y -r backend/requirements_secondary.txt || true

      - name: Synchronize application code
        run: |
          rsync -av \
            --exclude='tests' \
            --exclude='*.pyc' \
            --exclude='__pycache__' \
            --exclude='*.log' \
            --exclude='.git' \
            --exclude='docs' \
            --exclude='*.md' \
            --exclude='requirements_app.txt' \
            . build/
          
          # Mover main.py a la raíz de build/ si está en backend/
          if [ -f "build/backend/main.py" ]; then
            mv build/backend/main.py build/
            rm -rf build/backend/
          fi

      - name: List files in build directory
        run: |
          echo "Contenido de build/:"
          ls -R build/

      - name: Package application code
        run: |
          cd build
          zip -r9 ../backend.zip . -x "*.pyc" -x "__pycache__/*" -x "*.log" -x "docs/*" -x "*.md"
          cd ..
          ZIP_SIZE=$(du -b backend.zip | cut -f1)
          echo "Backend package size: $ZIP_SIZE bytes"
          if [ $ZIP_SIZE -gt 52428800 ]; then
            echo "Backend package size exceeds 50 MB limit."
            exit 1
          fi

      - name: Upload code to Lambda
        run: |
          aws lambda update-function-code \
            --function-name anunc-ia-backend \
            --zip-file fileb://backend.zip

      - name: Wait before associating layers
        run: |
          echo "Esperando 30 segundos para asegurar que las capas estén disponibles..."
          sleep 30

      - name: Associate both layers to Lambda function with retries
        run: |
          MAX_RETRIES=5
          RETRY_DELAY=10
          for i in $(seq 1 $MAX_RETRIES); do
            LAYER_MAIN_ARN=$(aws lambda list-layer-versions --layer-name anunc-ia-dependencies-main --query 'LayerVersions[-1].LayerVersionArn' --output text)
            LAYER_SECONDARY_ARN=$(aws lambda list-layer-versions --layer-name anunc-ia-dependencies-secondary --query 'LayerVersions[-1].LayerVersionArn' --output text)
            if aws lambda update-function-configuration --function-name anunc-ia-backend --layers $LAYER_MAIN_ARN $LAYER_SECONDARY_ARN; then
              echo "Configuración de la función actualizada exitosamente."
              break
            else
              echo "Actualización fallida. Intento $i de $MAX_RETRIES."
              if [ $i -eq $MAX_RETRIES ]; then
                echo "Máximo de intentos alcanzado. Saliendo con fallo."
                exit 1
              fi
              echo "Esperando $RETRY_DELAY segundos antes de reintentar..."
              sleep $RETRY_DELAY
            fi
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

  deploy_frontend_after_backend:
    runs-on: ubuntu-latest
    needs: deploy_backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Verify dist directory exists
        run: |
          if [ ! -d "frontend/dist" ]; then
            echo "Error: Dist directory not found. Exiting."
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Deploy frontend to S3
        run: |
          aws s3 sync frontend/dist/ s3://anunc-ia-frontend --delete
