name: Deploy AnuncIA to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379

    steps:
    # 1. Checkout del código
    - name: Checkout code
      uses: actions/checkout@v2

    # 2. Configurar Python
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    # 3. Configurar variables de entorno desde secretos
    - name: Set environment variables
      run: |
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV

    # 4. Crear y Empaquetar la Capa de Dependencias
    - name: Create Lambda Layer
      run: |
        mkdir -p lambda_layer/python
        pip install --upgrade pip
        pip install -r backend/requirements.txt -t lambda_layer/python
        zip -r lambda_layer.zip lambda_layer

    # 5. Desplegar la Capa a AWS Lambda
    - name: Deploy Lambda Layer
      id: deploy_layer
      run: |
        LAYER_NAME="anunc-ia-dependencies"
        # Verificar si la capa ya existe y obtener la última versión
        LAYER_VERSION=$(aws lambda list-layer-versions --layer-name $LAYER_NAME --query 'LayerVersions[-1].Version' --output text 2>/dev/null || echo "0")
        if [[ "$LAYER_VERSION" == "0" ]]; then
          # Crear una nueva capa
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name $LAYER_NAME \
            --description "Dependencies for AnuncIA backend" \
            --zip-file fileb://lambda_layer.zip \
            --compatible-runtimes python3.12 \
            --query 'LayerVersionArn' \
            --output text)
        else
          # Crear una nueva versión de la capa existente
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name $LAYER_NAME \
            --description "Dependencies for AnuncIA backend v$(($LAYER_VERSION + 1))" \
            --zip-file fileb://lambda_layer.zip \
            --compatible-runtimes python3.12 \
            --query 'LayerVersionArn' \
            --output text)
        fi
        echo "::set-output name=layer_arn::$LAYER_ARN"

    # 6. Instalar Dependencias Globalmente para Migraciones y Pruebas
    - name: Install dependencies globally
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip list  # Listar paquetes instalados para depuración

    # 7. Verificar Instalación de Alembic
    - name: Verify Alembic Installation
      working-directory: ./backend
      run: |
        python -m alembic --version

    # 8. Aplicar Migraciones con Alembic
    - name: Apply Alembic migrations
      working-directory: ./backend
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        python -m alembic upgrade head

    # 9. Ejecutar Pruebas con Coverage
    - name: Run tests with coverage
      env:
        REDIS_URL: redis://localhost:6379
        DATABASE_URL: "sqlite:///:memory:"
      working-directory: ./backend
      run: |
        python -m pip install coverage
        coverage run --rcfile=.coveragerc -m pytest tests
        coverage report
        coverage xml -o coverage.xml
      continue-on-error: true

    # 10. Preparar el Paquete Lambda (Solo Código Fuente)
    - name: Prepare Lambda package
      working-directory: ./backend
      run: |
        zip -r backend.zip main.py  # Crear el ZIP solo con el código fuente

    # 11. Listar Contenido del ZIP para Depuración
    - name: List ZIP contents (Debugging Step)
      run: unzip -l backend.zip

    # 12. Configurar Credenciales de AWS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    # 13. Desplegar la Función Lambda y Añadir la Capa
    - name: Deploy to AWS Lambda
      run: |
        LAYER_ARN=${{ steps.deploy_layer.outputs.layer_arn }}
        # Actualizar la configuración de la función Lambda para incluir la capa
        aws lambda update-function-configuration \
          --function-name anunc-ia-backend \
          --layers $LAYER_ARN

        # Actualizar el código de la función Lambda
        aws lambda update-function-code \
          --function-name anunc-ia-backend \
          --zip-file fileb://backend.zip

  deploy_frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install

    # Skip deployment en modo desarrollo
    - name: Skip deployment in development mode
      if: ${{ github.event_name == 'push' }}
      run: echo "Development build, skipping deployment."

    - name: Build frontend (only for production)
      if: ${{ github.event_name != 'push' }}
      run: |
        cd frontend
        npm run build

    - name: Deploy to S3 (only if build exists)
      if: ${{ github.event_name != 'push' }}
      run: |
        if [ -d "frontend/build" ]; then
          aws s3 sync frontend/build/ s3://anunc-ia-frontend --delete
        else
          echo "Build folder not found, skipping S3 sync"
        fi
